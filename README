# chef-repo

This is the Chef-repo I maintain for my learning exercises.  It's very plain.
To use it just clone it to your workstation.  Then you can run the Cookbooks using chef-client local-mode or load the Cookbooks to a Chef server.

These are the chef.io Tutorials I followed to learn Chef:


https://learn.chef.io/tutorials/learn-the-basics
--------------------------------------------------

choose your server environment - Ubuntu 14.04
choose your operating environment - Vagrant and Virtual Box

Set up a virtual machine to manage (With Vagrant and Virtual Box)
1. Ensure your workstation (Windows laptop in this case) supports Virtualization
2. Install the Chef DK on your Windows Workstation (this includes a git and a ssh client)
3. Install Oracle's VirtualBox 
4. Install Hashicorp's Vagrant
5. Download an Ubuntu 14.04 VM image onto Vagrant:  
     $vagrant box add bento/ubuntu-14.04 --provider=virtualbox
6. Bring up an Ubuntu instance in Virtual Box using Vagrant and its image: 
     $vagrant init bento/ubuntu-14.04   (this generates the Vagrantfile)
     $vagrant up 
7. Connect to your Ubuntu instance
     $vagrant ssh
8. Install ChefDK on your Ubuntu instance

Configure a 'file' resource on your Ubuntu instance
1. Login to the instance and set up your working directory
   $ mkdir ~/chef-repo
2. Create an /tmp/MOTD file using Chef's file resource
3. Run chef-client in local mode a second time to display how chef maintains the file
4. Delete the /tmp/MOTD file using a second Chef file resource with the 'delete' action

Configure a package and service
1. Ensure the apt cache is up to date - Use the 'apt_update' resource
2. Install the Apache package - Use the 'package' resource
3. Start and enable the Apache service - Use the 'service' resource
4. Add a home page - Use the 'file' resource to set up index.html
5. Confirm your site is running - Run 'curl localhost'

Make your recipe more maneable
1. Create a cookbook
2. Use a template resource to build your home page, instead of the file resource
3. Run the cookbook



https://learn.chef.io/tutorials/manage-a-node/
----------------------------------------------

Choose your server environment: Ubuntu
Choose your Chef server environment: Vagrant and Virtual Box

Set up your workstation
1. Install ChefDK - We completed this step already in the sections above (Contains git and ssh)
2. Open a ChefDK command prompt (i.e PowerShell)
3. Verify your ChefDK installationo 'chef --version'
4. Set up your text editor (atom, sublime, etc)
5. Create your project directory:  $mkdir ~learn-chef; $ cd !$


Set up Chef server and a node to manage
1. Understand pre-requisites - Same as what we did in learn-the-basics above
2. Run the Vagrantfile - Use the Vagrantfile provided.  It brings up both a chef-server and a client node
      -This file has a post script that installs chef and create an 'admin' user and '4thcofee' org
      -The post script writes the admin's and org's .pem files to '/vagrant/secrets' which is shared to Windows
      -You can run 'vagrant destroy' at any time to destroy and rebuild this environment
3. Configure your workstation
     - create .chef dir
     - create .chef/knife.rb using the standard content provide in tutorial
     - Copy the admin user's .pem in .chef/
     - add a chef server entry to /etc/hosts
     - fetch the secure CERT using 'knife ssl fetch'
     - Verify the CERT using 'knife ssl check'


Upload a cookbook to chef-server
1. Get the learn_chef_apache2 cookbook from Github
2. Upload your cookbook to the chef server


Bootstrap your node
1. Get your node's connection details:"vagrant sshconfig node1-ubunut"
2. Run the bootstrap command 
    knife bootstrap localhost --ssh-port 2200 --ssh-user vagrant --sudo --identity-file /root/learn-chef/chef-server/.vagrant/machines/node1-ubuntu/virtualbox/private_key --node-name node1-ubuntu --run-list 'recipe[learn_chef_apache2]'
3. Confirm the bootstrap: knife node list

Update your node's configuration (Run chef-client)
1. Add a template to your cookbook html
2. Update your cookbook's metadata version
3. Upload your cookbook to the chef server
4. Run the cookbook on your node
5. Verify the result




https://learn.chef.io/tutorials/local-development/   ( aka get started with Test Kitchen )
-------------------------------------------------------------------------------------------

Set up your workstation for Chef development
   You workstation shoul be set up as shown in the sections above with ChefDK, VirtualBox and Vagrant 

Apply a cookbook locally
1. Get the learn_chef_apache2 cookbook from GitHub if you didn't do the lab steps above.
2. Examine the Test Kitchen configuration file '.kitchen.yml'.  This file gets created by 'chef generate cookbook'
   The sections of the .kitchen.yml file are: driver, provisioner, verifier, platforms, suites
3. Create the Test Kitchen instance running 'kitchen create' from within the dir of the cookbook.
4. Apply the learn_chef_apache2 cookbook to your test kitchen by running 'kitchen converge'
5. Verify that your Test Kitchen instance is configured as expected
6. Delete the Test Kitchen instance


Resolve a failure
1. Assign an owner to the home page
2. Apply the changes converging your kitchen
3. Resolve the failure 


https://learn.chef.io/manage-a-web-app/
---------------------------------------

Create the cookbook
1. Create the awesome_customers_ubuntu cookbook
2. Apply the awesome_customers_ubuntu cookbook on a Test Kitchen instance
   - Create .kitchen.yml with the contents provided in tutorial
   - Install Berkshelf
   - kitchen converge

Ensure the apt cache is up to date
1. Reference the apt cookbook from supermarket in you 'awesome_customers_ubuntu/metadata.rb'
2. Call apt::get in the default recipe
3. Test this in Kitchen

Configure Firewall
1. Reference the firewall cookbook from supermarket in metadata.rb
2. Create a recipe called 'Firewall' which uses the 'firewall_rule' resource from the Firewall cookbook.
3. Test it in Kitchen and confirm the firewal config by running '$ sudo ufw status'

Create a 'web_admin' user
1. Create a recipe called 'web_user' which will create a user and a group both called 'web_admin'
2. Add a call to the recipe in the default.rb
3. Test this in kitchen

Configure Apache
1. Reference the httpd cookbook from supermarket.
2. Write the Web recipe which will
   - Install Apache
   - Configure Apache. This will leverage a template resource
   - Create index.html
4. Set the web recipe to run in the default.rb
5. Apply and verify the configuration in kitchen.  You'll want to see that Apache gets installed and the web page is created and is accessible. 

Create the database passwords
1. Write a method called random_password which we'll use to generate a password for mysql.  Store the method in the attribue file
2. Define the node attributes
3. Modify your test kitchen config file to support local development.  
   We'll add a password attributes directly to the kitchen.yml to overrride the value from the attrs file.
   This is required because kitchen won't store attrs across runs.


Configure MySQL
1. Reference the mysql cookbook from Supermarket
2. Generate the DB recipe.
3. Configure MySQL using the mysql_client and mysql_service recipes from the myssql cookbook
   This will install the mysql pkgs
4. Set the DB recipe to run including it in default.rb
5. Test in Kitchen


Configure The MySQL DB
1. Reference the mysql2_chef_gem and database cookbooks
   - The mysql2_chef_gem installs the mysql2 Ruby library which will be used by the database cookbooks.
   - The database cookbook is fetched from Supermarket.
2. Install the mysql2 Ruby gem.  You'll use  the mysql2_chef_gem resource.
3. Create the database instance.  You'll use the mysql_database resource, which comes from the database cookbook.
4. Create a MySQL database user.  You'll use the mysql_database_user resource from the database cookbook to achieve this.
   This 
5. Create a database table and some sample data.  This will be done through a mysql script we will write and the execute with chef.
   - Create a cookbook file that will contain the script and write the contents into the file
   - Add the cookbook_file resource to copy the script over to the hosts
   - Add an execute resource to run the script which will create the table
6. Test in kitchen
   run ' mysqlshow -h 127.0.0.1 -uroot -pmysql_root_password'
  

Configure PHP
1. Install PHP 
   - Install the http_module from the httpd cookbook.
   - Install php5-mysql using the package resource
2. Write the PHP application 
   - Create a template for the index.php.  Include all the logic to connect to mysql and display the data you want to display.
3. Test in kitchen


Run you Web Application on a Node
1. Bring up a node to manage
   We'll use the node1-ubuntu vagrant box from this tutorial
2. Upload your cookbooks to Chef server
   -Run 'berks install' to download the cookbook dependencies we have identified
   -Run 'berks upload --no-ssl-verify' to upload all the cookbooks to the chef server.
  


https://learn.chef.io/tutorials/inspec/
---------------------------------------




https://learn.chef.io/tutorials/chefspec/
-------------------------------------------




https://learn.chef.io/tutorials/verify-style/
------------------------------------------------




https://learn.chef.io/automate/
--------------------------------



https://learn.chef.io/tutorials/compliance-assess/

https://learn.chef.io/tutorials/compliance-remediate/

https://learn.chef.io/skills/beyond-essentials-1/ what happens during knife bootstrap

https://learn.chef.io/skills/beyond-essentials-2/ what happens during a chef client run

https://learn.chef.io/skills/beyond-essentials-3/ what is the security model used by chef

